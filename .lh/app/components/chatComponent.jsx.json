{
    "sourceFile": "app/components/chatComponent.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 70,
            "patches": [
                {
                    "date": 1695421057675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1695421792431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,14 @@\n import React, { useState, useEffect, useRef } from 'react';\r\n import { auth, db } from '../firebase';\r\n import { doc, updateDoc, arrayUnion, getDoc } from 'firebase/firestore';\r\n \r\n-import { ChatOpenAI } from \"langchain/chat_models/openai\";\r\n-import { ConversationSummaryBufferMemory } from \"langchain/memory\";\r\n-import { ConversationChain } from \"langchain/chains\";\r\n-import { MessagesPlaceholder, ChatPromptTemplate } from \"langchain/prompts\";\r\n \r\n-\r\n const ChatComponent = () => {\r\n   const [inputMessage, setInputMessage] = useState('');\r\n   const [chatHistory, setChatHistory] = useState([]);\r\n   const [currentUser, setCurrentUser] = useState(null);\r\n-  const [sessionId, setSessionId] = useState(null); \r\n \r\n-  const aiResponseRef = useRef(\"\");\r\n-  const memoryRef = useRef(\"\");\r\n   useEffect(() => {\r\n     // Ovdje dohvatite trenutnog korisnika iz Firebase autentikacije\r\n     const unsubscribe = auth.onAuthStateChanged((user) => {\r\n       setCurrentUser(user);\r\n"
                },
                {
                    "date": 1695421969375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,22 @@\n-import React, { useState, useEffect, useRef } from 'react';\r\n+import React, { useState, useEffect } from 'react';\r\n import { auth, db } from '../firebase';\r\n-import { doc, updateDoc, arrayUnion, getDoc } from 'firebase/firestore';\r\n+import { doc, setDoc, updateDoc, arrayUnion, getDoc } from 'firebase/firestore';\r\n+import sendMessage from '../send_message'; // Importirajte funkciju za slanje poruka\r\n \r\n-\r\n const ChatComponent = () => {\r\n   const [inputMessage, setInputMessage] = useState('');\r\n   const [chatHistory, setChatHistory] = useState([]);\r\n   const [currentUser, setCurrentUser] = useState(null);\r\n+  const [sessionId, setSessionId] = useState(null);\r\n \r\n   useEffect(() => {\r\n-    // Ovdje dohvatite trenutnog korisnika iz Firebase autentikacije\r\n+    // Dohvati trenutnog korisnika iz Firebase autentikacije\r\n     const unsubscribe = auth.onAuthStateChanged((user) => {\r\n       setCurrentUser(user);\r\n     });\r\n \r\n-    // Poništiti pretplatu kada komponenta unmounts\r\n+    // Poništi pretplatu kada komponenta unmounts\r\n     return () => {\r\n       unsubscribe();\r\n     };\r\n   }, []);\r\n@@ -28,9 +29,16 @@\n         const sessionRef = doc(db, 'session', user_id);\r\n \r\n         try {\r\n           const sessionDoc = await getDoc(sessionRef);\r\n-          if (sessionDoc.exists()) {\r\n+\r\n+          if (!sessionDoc.exists()) {\r\n+            // Ako dokument ne postoji, stvori ga\r\n+            await setDoc(sessionRef, {\r\n+              sessionId: user_id, // Ovdje koristite \"id\" korisnika kao sessionId\r\n+              // Dodajte ostale potrebne podatke u dokument\r\n+            });\r\n+          } else {\r\n             const sessionData = sessionDoc.data();\r\n             const sessionSessionId = sessionData.sessionId;\r\n \r\n             // Postavite sessionId u stanje\r\n@@ -47,96 +55,77 @@\n \r\n   const handleSendMessage = async () => {\r\n     if (inputMessage.trim() === '') return;\r\n \r\n-\r\n-\r\n     const user_id = currentUser.uid;\r\n-    const sessionRef = doc(db, \"session\", user_id);\r\n+    const sessionRef = doc(db, 'session', user_id);\r\n \r\n-    const sessionDoc = await getDoc(sessionRef);\r\n-    const sessionData = sessionDoc.data();\r\n+    // Slanje poruke i dobivanje odgovora\r\n+    const { aiResponse, memory } = await sendMessage(inputMessage, user_id, sessionId);\r\n \r\n-    if (sessionData && sessionData.session_memory) {\r\n-\r\n-      const sessionMemory = JSON.parse(sessionData.session_memory)\r\n-      const { aiResponse, memory } = await sendMessage(inputMessage,sessionMemory);\r\n-\r\n-      console.log(sessionMemory)\r\n-      aiResponseRef.current = aiResponse;\r\n-      memoryRef.current = memory;\r\n-    } else {\r\n-      const { aiResponse, memory } = await sendMessage(inputMessage);\r\n-\r\n-      aiResponseRef.current = aiResponse;\r\n-      memoryRef.current = memory;\r\n-    }\r\n-\r\n     const chatHistoryItem = {\r\n       userMessage: {\r\n-        role: \"user\",\r\n+        role: 'user',\r\n         message: inputMessage,\r\n         timestampUserMessage: new Date().toLocaleString(),\r\n       },\r\n       aiMessage: {\r\n-        role: \"ai\",\r\n-        message: aiResponseRef.current,\r\n+        role: 'ai',\r\n+        message: aiResponse,\r\n         timestampAiResponse: new Date().toLocaleString(),\r\n       },\r\n     };\r\n \r\n     setChatHistory([...chatHistory, chatHistoryItem]);\r\n+    setInputMessage('');\r\n \r\n-    setInputMessage(\"\");\r\n-\r\n     if (currentUser) {\r\n       try {\r\n         await updateDoc(sessionRef, {\r\n           session_history: arrayUnion(chatHistoryItem),\r\n-          session_memory: JSON.stringify(memoryRef.current)\r\n+          session_memory: JSON.stringify(memory),\r\n         });\r\n       } catch (error) {\r\n-        console.error(\"Greška prilikom ažuriranja dokumenta:\", error);\r\n+        console.error('Greška prilikom ažuriranja dokumenta:', error);\r\n       }\r\n     }\r\n   };\r\n+\r\n   return (\r\n     <div className=\"p-4 space-y-4\">\r\n       <div className=\"h-96 border border-gray-300 p-4 overflow-y-auto text-black\">\r\n         {chatHistory.map((chatHistoryItem, index) => (\r\n-          <>\r\n-            <div\r\n-              key={index}\r\n-              className={`${\r\n-                chatHistoryItem.userMessage.role === \"user\"\r\n-                  ? \"text-blue-600\"\r\n-                  : \"text-green-600\"\r\n-              } ${\r\n-                chatHistoryItem.userMessage.role === \"user\"\r\n-                  ? \"text-right\"\r\n-                  : \"text-left\"\r\n-              } whitespace-pre-line`}\r\n-            >\r\n-              {chatHistoryItem.userMessage.message}\r\n-              <div className=\"text-xs text-gray-500 ml-2\">\r\n-                {chatHistoryItem.userMessage.timestampUserMessage}\r\n-              </div>\r\n+          <div\r\n+            key={index}\r\n+            className={`${\r\n+              chatHistoryItem.userMessage.role === 'user'\r\n+                ? 'text-blue-600'\r\n+                : 'text-green-600'\r\n+            } ${\r\n+              chatHistoryItem.userMessage.role === 'user'\r\n+                ? 'text-right'\r\n+                : 'text-left'\r\n+            } whitespace-pre-line`}\r\n+          >\r\n+            {chatHistoryItem.userMessage.message}\r\n+            <div className=\"text-xs text-gray-500 ml-2\">\r\n+              {chatHistoryItem.userMessage.timestampUserMessage}\r\n             </div>\r\n-            <div\r\n-              key={`${index}-ai`}\r\n-              className={`${\r\n-                chatHistoryItem.aiMessage.role === \"user\"\r\n-                  ? \"text-blue-600\"\r\n-                  : \"text-green-600\"\r\n-              } ${\r\n-                chatHistoryItem.aiMessage.role === \"user\"\r\n-                  ? \"text-right\"\r\n-                  : \"text-left\"\r\n-              } whitespace-pre-line`}\r\n-            >\r\n-              {chatHistoryItem.aiMessage.message}\r\n-            </div>\r\n-          </>\r\n+          </div>\r\n+          <div\r\n+            key={`${index}-ai`}\r\n+            className={`${\r\n+              chatHistoryItem.aiMessage.role === 'user'\r\n+                ? 'text-blue-600'\r\n+                : 'text-green-600'\r\n+            } ${\r\n+              chatHistoryItem.aiMessage.role === 'user'\r\n+                ? 'text-right'\r\n+                : 'text-left'\r\n+            } whitespace-pre-line`}\r\n+          >\r\n+            {chatHistoryItem.aiMessage.message}\r\n+          </div>\r\n         ))}\r\n       </div>\r\n \r\n       <div className=\"flex\">\r\n"
                },
                {
                    "date": 1695421974895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,150 +0,0 @@\n-import React, { useState, useEffect } from 'react';\r\n-import { auth, db } from '../firebase';\r\n-import { doc, setDoc, updateDoc, arrayUnion, getDoc } from 'firebase/firestore';\r\n-import sendMessage from '../send_message'; // Importirajte funkciju za slanje poruka\r\n-\r\n-const ChatComponent = () => {\r\n-  const [inputMessage, setInputMessage] = useState('');\r\n-  const [chatHistory, setChatHistory] = useState([]);\r\n-  const [currentUser, setCurrentUser] = useState(null);\r\n-  const [sessionId, setSessionId] = useState(null);\r\n-\r\n-  useEffect(() => {\r\n-    // Dohvati trenutnog korisnika iz Firebase autentikacije\r\n-    const unsubscribe = auth.onAuthStateChanged((user) => {\r\n-      setCurrentUser(user);\r\n-    });\r\n-\r\n-    // Poništi pretplatu kada komponenta unmounts\r\n-    return () => {\r\n-      unsubscribe();\r\n-    };\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    // Dohvati sessionId za trenutnog korisnika iz kolekcije \"session\"\r\n-    const getSessionId = async () => {\r\n-      if (currentUser) {\r\n-        const user_id = currentUser.uid;\r\n-        const sessionRef = doc(db, 'session', user_id);\r\n-\r\n-        try {\r\n-          const sessionDoc = await getDoc(sessionRef);\r\n-\r\n-          if (!sessionDoc.exists()) {\r\n-            // Ako dokument ne postoji, stvori ga\r\n-            await setDoc(sessionRef, {\r\n-              sessionId: user_id, // Ovdje koristite \"id\" korisnika kao sessionId\r\n-              // Dodajte ostale potrebne podatke u dokument\r\n-            });\r\n-          } else {\r\n-            const sessionData = sessionDoc.data();\r\n-            const sessionSessionId = sessionData.sessionId;\r\n-\r\n-            // Postavite sessionId u stanje\r\n-            setSessionId(sessionSessionId);\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Greška prilikom dohvatanja sessionId:', error);\r\n-        }\r\n-      }\r\n-    };\r\n-\r\n-    getSessionId();\r\n-  }, [currentUser]);\r\n-\r\n-  const handleSendMessage = async () => {\r\n-    if (inputMessage.trim() === '') return;\r\n-\r\n-    const user_id = currentUser.uid;\r\n-    const sessionRef = doc(db, 'session', user_id);\r\n-\r\n-    // Slanje poruke i dobivanje odgovora\r\n-    const { aiResponse, memory } = await sendMessage(inputMessage, user_id, sessionId);\r\n-\r\n-    const chatHistoryItem = {\r\n-      userMessage: {\r\n-        role: 'user',\r\n-        message: inputMessage,\r\n-        timestampUserMessage: new Date().toLocaleString(),\r\n-      },\r\n-      aiMessage: {\r\n-        role: 'ai',\r\n-        message: aiResponse,\r\n-        timestampAiResponse: new Date().toLocaleString(),\r\n-      },\r\n-    };\r\n-\r\n-    setChatHistory([...chatHistory, chatHistoryItem]);\r\n-    setInputMessage('');\r\n-\r\n-    if (currentUser) {\r\n-      try {\r\n-        await updateDoc(sessionRef, {\r\n-          session_history: arrayUnion(chatHistoryItem),\r\n-          session_memory: JSON.stringify(memory),\r\n-        });\r\n-      } catch (error) {\r\n-        console.error('Greška prilikom ažuriranja dokumenta:', error);\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"p-4 space-y-4\">\r\n-      <div className=\"h-96 border border-gray-300 p-4 overflow-y-auto text-black\">\r\n-        {chatHistory.map((chatHistoryItem, index) => (\r\n-          <div\r\n-            key={index}\r\n-            className={`${\r\n-              chatHistoryItem.userMessage.role === 'user'\r\n-                ? 'text-blue-600'\r\n-                : 'text-green-600'\r\n-            } ${\r\n-              chatHistoryItem.userMessage.role === 'user'\r\n-                ? 'text-right'\r\n-                : 'text-left'\r\n-            } whitespace-pre-line`}\r\n-          >\r\n-            {chatHistoryItem.userMessage.message}\r\n-            <div className=\"text-xs text-gray-500 ml-2\">\r\n-              {chatHistoryItem.userMessage.timestampUserMessage}\r\n-            </div>\r\n-          </div>\r\n-          <div\r\n-            key={`${index}-ai`}\r\n-            className={`${\r\n-              chatHistoryItem.aiMessage.role === 'user'\r\n-                ? 'text-blue-600'\r\n-                : 'text-green-600'\r\n-            } ${\r\n-              chatHistoryItem.aiMessage.role === 'user'\r\n-                ? 'text-right'\r\n-                : 'text-left'\r\n-            } whitespace-pre-line`}\r\n-          >\r\n-            {chatHistoryItem.aiMessage.message}\r\n-          </div>\r\n-        ))}\r\n-      </div>\r\n-\r\n-      <div className=\"flex\">\r\n-        <input\r\n-          type=\"text\"\r\n-          className=\"flex-1 border border-gray-300 p-2 rounded-l text-black\"\r\n-          placeholder=\"Unesite poruku...\"\r\n-          value={inputMessage}\r\n-          onChange={(e) => setInputMessage(e.target.value)}\r\n-        />\r\n-        <button\r\n-          className=\"bg-blue-600 text-black p-2 rounded-r\"\r\n-          onClick={handleSendMessage}\r\n-        >\r\n-          Pošalji\r\n-        </button>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default ChatComponent;\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1695421986323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,150 @@\n-\n+import React, { useState, useEffect } from 'react';\r\n+import { auth, db } from '../firebase';\r\n+import { doc, setDoc, updateDoc, arrayUnion, getDoc } from 'firebase/firestore';\r\n+import sendMessage from '../send_message'; // Importirajte funkciju za slanje poruka\r\n+\r\n+const ChatComponent = () => {\r\n+  const [inputMessage, setInputMessage] = useState('');\r\n+  const [chatHistory, setChatHistory] = useState([]);\r\n+  const [currentUser, setCurrentUser] = useState(null);\r\n+  const [sessionId, setSessionId] = useState(null);\r\n+\r\n+  useEffect(() => {\r\n+    // Dohvati trenutnog korisnika iz Firebase autentikacije\r\n+    const unsubscribe = auth.onAuthStateChanged((user) => {\r\n+      setCurrentUser(user);\r\n+    });\r\n+\r\n+    // Poništi pretplatu kada komponenta unmounts\r\n+    return () => {\r\n+      unsubscribe();\r\n+    };\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    // Dohvati sessionId za trenutnog korisnika iz kolekcije \"session\"\r\n+    const getSessionId = async () => {\r\n+      if (currentUser) {\r\n+        const user_id = currentUser.uid;\r\n+        const sessionRef = doc(db, 'session', user_id);\r\n+\r\n+        try {\r\n+          const sessionDoc = await getDoc(sessionRef);\r\n+\r\n+          if (!sessionDoc.exists()) {\r\n+            // Ako dokument ne postoji, stvori ga\r\n+            await setDoc(sessionRef, {\r\n+              sessionId: user_id, // Ovdje koristite \"id\" korisnika kao sessionId\r\n+              // Dodajte ostale potrebne podatke u dokument\r\n+            });\r\n+          } else {\r\n+            const sessionData = sessionDoc.data();\r\n+            const sessionSessionId = sessionData.sessionId;\r\n+\r\n+            // Postavite sessionId u stanje\r\n+            setSessionId(sessionSessionId);\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Greška prilikom dohvatanja sessionId:', error);\r\n+        }\r\n+      }\r\n+    };\r\n+\r\n+    getSessionId();\r\n+  }, [currentUser]);\r\n+\r\n+  const handleSendMessage = async () => {\r\n+    if (inputMessage.trim() === '') return;\r\n+\r\n+    const user_id = currentUser.uid;\r\n+    const sessionRef = doc(db, 'session', user_id);\r\n+\r\n+    // Slanje poruke i dobivanje odgovora\r\n+    const { aiResponse, memory } = await sendMessage(inputMessage, user_id, sessionId);\r\n+\r\n+    const chatHistoryItem = {\r\n+      userMessage: {\r\n+        role: 'user',\r\n+        message: inputMessage,\r\n+        timestampUserMessage: new Date().toLocaleString(),\r\n+      },\r\n+      aiMessage: {\r\n+        role: 'ai',\r\n+        message: aiResponse,\r\n+        timestampAiResponse: new Date().toLocaleString(),\r\n+      },\r\n+    };\r\n+\r\n+    setChatHistory([...chatHistory, chatHistoryItem]);\r\n+    setInputMessage('');\r\n+\r\n+    if (currentUser) {\r\n+      try {\r\n+        await updateDoc(sessionRef, {\r\n+          session_history: arrayUnion(chatHistoryItem),\r\n+          session_memory: JSON.stringify(memory),\r\n+        });\r\n+      } catch (error) {\r\n+        console.error('Greška prilikom ažuriranja dokumenta:', error);\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"p-4 space-y-4\">\r\n+      <div className=\"h-96 border border-gray-300 p-4 overflow-y-auto text-black\">\r\n+        {chatHistory.map((chatHistoryItem, index) => (\r\n+          <div\r\n+            key={index}\r\n+            className={`${\r\n+              chatHistoryItem.userMessage.role === 'user'\r\n+                ? 'text-blue-600'\r\n+                : 'text-green-600'\r\n+            } ${\r\n+              chatHistoryItem.userMessage.role === 'user'\r\n+                ? 'text-right'\r\n+                : 'text-left'\r\n+            } whitespace-pre-line`}\r\n+          >\r\n+            {chatHistoryItem.userMessage.message}\r\n+            <div className=\"text-xs text-gray-500 ml-2\">\r\n+              {chatHistoryItem.userMessage.timestampUserMessage}\r\n+            </div>\r\n+          </div>\r\n+          <div\r\n+            key={`${index}-ai`}\r\n+            className={`${\r\n+              chatHistoryItem.aiMessage.role === 'user'\r\n+                ? 'text-blue-600'\r\n+                : 'text-green-600'\r\n+            } ${\r\n+              chatHistoryItem.aiMessage.role === 'user'\r\n+                ? 'text-right'\r\n+                : 'text-left'\r\n+            } whitespace-pre-line`}\r\n+          >\r\n+            {chatHistoryItem.aiMessage.message}\r\n+          </div>\r\n+        ))}\r\n+      </div>\r\n+\r\n+      <div className=\"flex\">\r\n+        <input\r\n+          type=\"text\"\r\n+          className=\"flex-1 border border-gray-300 p-2 rounded-l text-black\"\r\n+          placeholder=\"Unesite poruku...\"\r\n+          value={inputMessage}\r\n+          onChange={(e) => setInputMessage(e.target.value)}\r\n+        />\r\n+        <button\r\n+          className=\"bg-blue-600 text-black p-2 rounded-r\"\r\n+          onClick={handleSendMessage}\r\n+        >\r\n+          Pošalji\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default ChatComponent;\r\n"
                },
                {
                    "date": 1695422012537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,41 +92,9 @@\n \r\n   return (\r\n     <div className=\"p-4 space-y-4\">\r\n       <div className=\"h-96 border border-gray-300 p-4 overflow-y-auto text-black\">\r\n-        {chatHistory.map((chatHistoryItem, index) => (\r\n-          <div\r\n-            key={index}\r\n-            className={`${\r\n-              chatHistoryItem.userMessage.role === 'user'\r\n-                ? 'text-blue-600'\r\n-                : 'text-green-600'\r\n-            } ${\r\n-              chatHistoryItem.userMessage.role === 'user'\r\n-                ? 'text-right'\r\n-                : 'text-left'\r\n-            } whitespace-pre-line`}\r\n-          >\r\n-            {chatHistoryItem.userMessage.message}\r\n-            <div className=\"text-xs text-gray-500 ml-2\">\r\n-              {chatHistoryItem.userMessage.timestampUserMessage}\r\n-            </div>\r\n-          </div>\r\n-          <div\r\n-            key={`${index}-ai`}\r\n-            className={`${\r\n-              chatHistoryItem.aiMessage.role === 'user'\r\n-                ? 'text-blue-600'\r\n-                : 'text-green-600'\r\n-            } ${\r\n-              chatHistoryItem.aiMessage.role === 'user'\r\n-                ? 'text-right'\r\n-                : 'text-left'\r\n-            } whitespace-pre-line`}\r\n-          >\r\n-            {chatHistoryItem.aiMessage.message}\r\n-          </div>\r\n-        ))}\r\n+     \r\n       </div>\r\n \r\n       <div className=\"flex\">\r\n         <input\r\n"
                },
                {
                    "date": 1695422081049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,21 @@\n-import React, { useState, useEffect } from 'react';\r\n+import React, { useState, useEffect, useRef } from 'react';\r\n import { auth, db } from '../firebase';\r\n-import { doc, setDoc, updateDoc, arrayUnion, getDoc } from 'firebase/firestore';\r\n-import sendMessage from '../send_message'; // Importirajte funkciju za slanje poruka\r\n+import { doc, updateDoc, arrayUnion, getDoc } from 'firebase/firestore';\r\n \r\n+\r\n const ChatComponent = () => {\r\n   const [inputMessage, setInputMessage] = useState('');\r\n   const [chatHistory, setChatHistory] = useState([]);\r\n   const [currentUser, setCurrentUser] = useState(null);\r\n-  const [sessionId, setSessionId] = useState(null);\r\n \r\n   useEffect(() => {\r\n-    // Dohvati trenutnog korisnika iz Firebase autentikacije\r\n+    // Ovdje dohvatite trenutnog korisnika iz Firebase autentikacije\r\n     const unsubscribe = auth.onAuthStateChanged((user) => {\r\n       setCurrentUser(user);\r\n     });\r\n \r\n-    // Poništi pretplatu kada komponenta unmounts\r\n+    // Poništiti pretplatu kada komponenta unmounts\r\n     return () => {\r\n       unsubscribe();\r\n     };\r\n   }, []);\r\n@@ -29,16 +28,9 @@\n         const sessionRef = doc(db, 'session', user_id);\r\n \r\n         try {\r\n           const sessionDoc = await getDoc(sessionRef);\r\n-\r\n-          if (!sessionDoc.exists()) {\r\n-            // Ako dokument ne postoji, stvori ga\r\n-            await setDoc(sessionRef, {\r\n-              sessionId: user_id, // Ovdje koristite \"id\" korisnika kao sessionId\r\n-              // Dodajte ostale potrebne podatke u dokument\r\n-            });\r\n-          } else {\r\n+          if (sessionDoc.exists()) {\r\n             const sessionData = sessionDoc.data();\r\n             const sessionSessionId = sessionData.sessionId;\r\n \r\n             // Postavite sessionId u stanje\r\n@@ -55,46 +47,97 @@\n \r\n   const handleSendMessage = async () => {\r\n     if (inputMessage.trim() === '') return;\r\n \r\n+\r\n+\r\n     const user_id = currentUser.uid;\r\n-    const sessionRef = doc(db, 'session', user_id);\r\n+    const sessionRef = doc(db, \"session\", user_id);\r\n \r\n-    // Slanje poruke i dobivanje odgovora\r\n-    const { aiResponse, memory } = await sendMessage(inputMessage, user_id, sessionId);\r\n+    const sessionDoc = await getDoc(sessionRef);\r\n+    const sessionData = sessionDoc.data();\r\n \r\n+    if (sessionData && sessionData.session_memory) {\r\n+\r\n+      const sessionMemory = JSON.parse(sessionData.session_memory)\r\n+      const { aiResponse, memory } = await sendMessage(inputMessage,sessionMemory);\r\n+\r\n+      console.log(sessionMemory)\r\n+      aiResponseRef.current = aiResponse;\r\n+      memoryRef.current = memory;\r\n+    } else {\r\n+      const { aiResponse, memory } = await sendMessage(inputMessage);\r\n+\r\n+      aiResponseRef.current = aiResponse;\r\n+      memoryRef.current = memory;\r\n+    }\r\n+\r\n     const chatHistoryItem = {\r\n       userMessage: {\r\n-        role: 'user',\r\n+        role: \"user\",\r\n         message: inputMessage,\r\n         timestampUserMessage: new Date().toLocaleString(),\r\n       },\r\n       aiMessage: {\r\n-        role: 'ai',\r\n-        message: aiResponse,\r\n+        role: \"ai\",\r\n+        message: aiResponseRef.current,\r\n         timestampAiResponse: new Date().toLocaleString(),\r\n       },\r\n     };\r\n \r\n     setChatHistory([...chatHistory, chatHistoryItem]);\r\n-    setInputMessage('');\r\n \r\n+    setInputMessage(\"\");\r\n+\r\n     if (currentUser) {\r\n       try {\r\n         await updateDoc(sessionRef, {\r\n           session_history: arrayUnion(chatHistoryItem),\r\n-          session_memory: JSON.stringify(memory),\r\n+          session_memory: JSON.stringify(memoryRef.current)\r\n         });\r\n       } catch (error) {\r\n-        console.error('Greška prilikom ažuriranja dokumenta:', error);\r\n+        console.error(\"Greška prilikom ažuriranja dokumenta:\", error);\r\n       }\r\n     }\r\n   };\r\n-\r\n   return (\r\n     <div className=\"p-4 space-y-4\">\r\n       <div className=\"h-96 border border-gray-300 p-4 overflow-y-auto text-black\">\r\n-     \r\n+        {chatHistory.map((chatHistoryItem, index) => (\r\n+          <>\r\n+            <div\r\n+              key={index}\r\n+              className={`${\r\n+                chatHistoryItem.userMessage.role === \"user\"\r\n+                  ? \"text-blue-600\"\r\n+                  : \"text-green-600\"\r\n+              } ${\r\n+                chatHistoryItem.userMessage.role === \"user\"\r\n+                  ? \"text-right\"\r\n+                  : \"text-left\"\r\n+              } whitespace-pre-line`}\r\n+            >\r\n+              {chatHistoryItem.userMessage.message}\r\n+              <div className=\"text-xs text-gray-500 ml-2\">\r\n+                {chatHistoryItem.userMessage.timestampUserMessage}\r\n+              </div>\r\n+            </div>\r\n+            <div\r\n+              key={`${index}-ai`}\r\n+              className={`${\r\n+                chatHistoryItem.aiMessage.role === \"user\"\r\n+                  ? \"text-blue-600\"\r\n+                  : \"text-green-600\"\r\n+              } ${\r\n+                chatHistoryItem.aiMessage.role === \"user\"\r\n+                  ? \"text-right\"\r\n+                  : \"text-left\"\r\n+              } whitespace-pre-line`}\r\n+            >\r\n+              {chatHistoryItem.aiMessage.message}\r\n+            </div>\r\n+          </>\r\n+        ))}\r\n       </div>\r\n \r\n       <div className=\"flex\">\r\n         <input\r\n"
                },
                {
                    "date": 1695422102939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     // Dohvati sessionId za trenutnog korisnika iz kolekcije \"session\"\r\n     const getSessionId = async () => {\r\n       if (currentUser) {\r\n         const user_id = currentUser.uid;\r\n-        const sessionRef = doc(db, 'session', user_id);\r\n+        const sessionRef = doc(db, 'session');\r\n \r\n         try {\r\n           const sessionDoc = await getDoc(sessionRef);\r\n           if (sessionDoc.exists()) {\r\n"
                },
                {
                    "date": 1695422210768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,10 +47,8 @@\n \r\n   const handleSendMessage = async () => {\r\n     if (inputMessage.trim() === '') return;\r\n \r\n-\r\n-\r\n     const user_id = currentUser.uid;\r\n     const sessionRef = doc(db, \"session\", user_id);\r\n \r\n     const sessionDoc = await getDoc(sessionRef);\r\n"
                },
                {
                    "date": 1695422259021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n \r\n \r\n const ChatComponent = () => {\r\n   const [inputMessage, setInputMessage] = useState('');\r\n-  const [chatHistory, setChatHistory] = useState([]);\r\n   const [currentUser, setCurrentUser] = useState(null);\r\n \r\n   useEffect(() => {\r\n     // Ovdje dohvatite trenutnog korisnika iz Firebase autentikacije\r\n@@ -46,9 +45,8 @@\n   }, [currentUser]);\r\n \r\n   const handleSendMessage = async () => {\r\n     if (inputMessage.trim() === '') return;\r\n-\r\n     const user_id = currentUser.uid;\r\n     const sessionRef = doc(db, \"session\", user_id);\r\n \r\n     const sessionDoc = await getDoc(sessionRef);\r\n"
                },
                {
                    "date": 1695422323413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,23 +51,9 @@\n \r\n     const sessionDoc = await getDoc(sessionRef);\r\n     const sessionData = sessionDoc.data();\r\n \r\n-    if (sessionData && sessionData.session_memory) {\r\n \r\n-      const sessionMemory = JSON.parse(sessionData.session_memory)\r\n-      const { aiResponse, memory } = await sendMessage(inputMessage,sessionMemory);\r\n-\r\n-      console.log(sessionMemory)\r\n-      aiResponseRef.current = aiResponse;\r\n-      memoryRef.current = memory;\r\n-    } else {\r\n-      const { aiResponse, memory } = await sendMessage(inputMessage);\r\n-\r\n-      aiResponseRef.current = aiResponse;\r\n-      memoryRef.current = memory;\r\n-    }\r\n-\r\n     const chatHistoryItem = {\r\n       userMessage: {\r\n         role: \"user\",\r\n         message: inputMessage,\r\n"
                },
                {
                    "date": 1695422330756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,24 +49,10 @@\n     const user_id = currentUser.uid;\r\n     const sessionRef = doc(db, \"session\", user_id);\r\n \r\n     const sessionDoc = await getDoc(sessionRef);\r\n-    const sessionData = sessionDoc.data();\r\n-\r\n-\r\n-    const chatHistoryItem = {\r\n-      userMessage: {\r\n-        role: \"user\",\r\n-        message: inputMessage,\r\n-        timestampUserMessage: new Date().toLocaleString(),\r\n-      },\r\n-      aiMessage: {\r\n-        role: \"ai\",\r\n-        message: aiResponseRef.current,\r\n-        timestampAiResponse: new Date().toLocaleString(),\r\n-      },\r\n-    };\r\n-\r\n+   \r\n+ \r\n     setChatHistory([...chatHistory, chatHistoryItem]);\r\n \r\n     setInputMessage(\"\");\r\n \r\n"
                },
                {
                    "date": 1695422341591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,24 +50,10 @@\n     const sessionRef = doc(db, \"session\", user_id);\r\n \r\n     const sessionDoc = await getDoc(sessionRef);\r\n    \r\n- \r\n-    setChatHistory([...chatHistory, chatHistoryItem]);\r\n-\r\n     setInputMessage(\"\");\r\n \r\n-    if (currentUser) {\r\n-      try {\r\n-        await updateDoc(sessionRef, {\r\n-          session_history: arrayUnion(chatHistoryItem),\r\n-          session_memory: JSON.stringify(memoryRef.current)\r\n-        });\r\n-      } catch (error) {\r\n-        console.error(\"Greška prilikom ažuriranja dokumenta:\", error);\r\n-      }\r\n-    }\r\n-  };\r\n   return (\r\n     <div className=\"p-4 space-y-4\">\r\n       <div className=\"h-96 border border-gray-300 p-4 overflow-y-auto text-black\">\r\n         {chatHistory.map((chatHistoryItem, index) => (\r\n"
                },
                {
                    "date": 1695422347956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,19 @@\n     const sessionDoc = await getDoc(sessionRef);\r\n    \r\n     setInputMessage(\"\");\r\n \r\n+    if (currentUser) {\r\n+      try {\r\n+        await updateDoc(sessionRef, {\r\n+          session_history: arrayUnion(chatHistoryItem),\r\n+          session_memory: JSON.stringify(memoryRef.current)\r\n+        });\r\n+      } catch (error) {\r\n+        console.error(\"Greška prilikom ažuriranja dokumenta:\", error);\r\n+      }\r\n+    }\r\n+  };\r\n   return (\r\n     <div className=\"p-4 space-y-4\">\r\n       <div className=\"h-96 border border-gray-300 p-4 overflow-y-auto text-black\">\r\n         {chatHistory.map((chatHistoryItem, index) => (\r\n"
                },
                {
                    "date": 1695422354293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,19 +52,11 @@\n     const sessionDoc = await getDoc(sessionRef);\r\n    \r\n     setInputMessage(\"\");\r\n \r\n-    if (currentUser) {\r\n-      try {\r\n-        await updateDoc(sessionRef, {\r\n-          session_history: arrayUnion(chatHistoryItem),\r\n-          session_memory: JSON.stringify(memoryRef.current)\r\n-        });\r\n-      } catch (error) {\r\n-        console.error(\"Greška prilikom ažuriranja dokumenta:\", error);\r\n-      }\r\n-    }\r\n   };\r\n+\r\n+  \r\n   return (\r\n     <div className=\"p-4 space-y-4\">\r\n       <div className=\"h-96 border border-gray-300 p-4 overflow-y-auto text-black\">\r\n         {chatHistory.map((chatHistoryItem, index) => (\r\n"
                },
                {
                    "date": 1695422362316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,16 +47,14 @@\n   const handleSendMessage = async () => {\r\n     if (inputMessage.trim() === '') return;\r\n     const user_id = currentUser.uid;\r\n     const sessionRef = doc(db, \"session\", user_id);\r\n-\r\n-    const sessionDoc = await getDoc(sessionRef);\r\n    \r\n     setInputMessage(\"\");\r\n \r\n   };\r\n \r\n-  \r\n+\r\n   return (\r\n     <div className=\"p-4 space-y-4\">\r\n       <div className=\"h-96 border border-gray-300 p-4 overflow-y-auto text-black\">\r\n         {chatHistory.map((chatHistoryItem, index) => (\r\n"
                },
                {
                    "date": 1695422388956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,8 @@\n \r\n   const handleSendMessage = async () => {\r\n     if (inputMessage.trim() === '') return;\r\n     const user_id = currentUser.uid;\r\n-    const sessionRef = doc(db, \"session\", user_id);\r\n    \r\n     setInputMessage(\"\");\r\n \r\n   };\r\n@@ -56,43 +55,9 @@\n \r\n   return (\r\n     <div className=\"p-4 space-y-4\">\r\n       <div className=\"h-96 border border-gray-300 p-4 overflow-y-auto text-black\">\r\n-        {chatHistory.map((chatHistoryItem, index) => (\r\n-          <>\r\n-            <div\r\n-              key={index}\r\n-              className={`${\r\n-                chatHistoryItem.userMessage.role === \"user\"\r\n-                  ? \"text-blue-600\"\r\n-                  : \"text-green-600\"\r\n-              } ${\r\n-                chatHistoryItem.userMessage.role === \"user\"\r\n-                  ? \"text-right\"\r\n-                  : \"text-left\"\r\n-              } whitespace-pre-line`}\r\n-            >\r\n-              {chatHistoryItem.userMessage.message}\r\n-              <div className=\"text-xs text-gray-500 ml-2\">\r\n-                {chatHistoryItem.userMessage.timestampUserMessage}\r\n-              </div>\r\n-            </div>\r\n-            <div\r\n-              key={`${index}-ai`}\r\n-              className={`${\r\n-                chatHistoryItem.aiMessage.role === \"user\"\r\n-                  ? \"text-blue-600\"\r\n-                  : \"text-green-600\"\r\n-              } ${\r\n-                chatHistoryItem.aiMessage.role === \"user\"\r\n-                  ? \"text-right\"\r\n-                  : \"text-left\"\r\n-              } whitespace-pre-line`}\r\n-            >\r\n-              {chatHistoryItem.aiMessage.message}\r\n-            </div>\r\n-          </>\r\n-        ))}\r\n+       \r\n       </div>\r\n \r\n       <div className=\"flex\">\r\n         <input\r\n"
                },
                {
                    "date": 1695422405029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n \r\n   return (\r\n     <div className=\"p-4 space-y-4\">\r\n       <div className=\"h-96 border border-gray-300 p-4 overflow-y-auto text-black\">\r\n-       \r\n+        //\r\n       </div>\r\n \r\n       <div className=\"flex\">\r\n         <input\r\n"
                },
                {
                    "date": 1695422411891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n \r\n   return (\r\n     <div className=\"p-4 space-y-4\">\r\n       <div className=\"h-96 border border-gray-300 p-4 overflow-y-auto text-black\">\r\n-        //\r\n+        koment\r\n       </div>\r\n \r\n       <div className=\"flex\">\r\n         <input\r\n"
                },
                {
                    "date": 1695422419409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n \r\n   return (\r\n     <div className=\"p-4 space-y-4\">\r\n       <div className=\"h-96 border border-gray-300 p-4 overflow-y-auto text-black\">\r\n-        koment\r\n+        {/*  */}\r\n       </div>\r\n \r\n       <div className=\"flex\">\r\n         <input\r\n"
                },
                {
                    "date": 1695422424595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n \r\n   return (\r\n     <div className=\"p-4 space-y-4\">\r\n       <div className=\"h-96 border border-gray-300 p-4 overflow-y-auto text-black\">\r\n-        {/*  */}\r\n+        {/* Add  */}\r\n       </div>\r\n \r\n       <div className=\"flex\">\r\n         <input\r\n"
                },
                {
                    "date": 1695422435839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,8 @@\n   const [inputMessage, setInputMessage] = useState('');\r\n   const [currentUser, setCurrentUser] = useState(null);\r\n \r\n   useEffect(() => {\r\n-    // Ovdje dohvatite trenutnog korisnika iz Firebase autentikacije\r\n     const unsubscribe = auth.onAuthStateChanged((user) => {\r\n       setCurrentUser(user);\r\n     });\r\n \r\n@@ -55,9 +54,9 @@\n \r\n   return (\r\n     <div className=\"p-4 space-y-4\">\r\n       <div className=\"h-96 border border-gray-300 p-4 overflow-y-auto text-black\">\r\n-        {/* Add  */}\r\n+        {/* Add chat */}\r\n       </div>\r\n \r\n       <div className=\"flex\">\r\n         <input\r\n"
                },
                {
                    "date": 1695422480524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useState, useEffect, useRef } from 'react';\r\n import { auth, db } from '../firebase';\r\n-import { doc, updateDoc, arrayUnion, getDoc } from 'firebase/firestore';\r\n+import { doc, getDoc } from 'firebase/firestore';\r\n \r\n \r\n const ChatComponent = () => {\r\n   const [inputMessage, setInputMessage] = useState('');\r\n@@ -11,16 +11,14 @@\n     const unsubscribe = auth.onAuthStateChanged((user) => {\r\n       setCurrentUser(user);\r\n     });\r\n \r\n-    // Poništiti pretplatu kada komponenta unmounts\r\n     return () => {\r\n       unsubscribe();\r\n     };\r\n   }, []);\r\n \r\n   useEffect(() => {\r\n-    // Dohvati sessionId za trenutnog korisnika iz kolekcije \"session\"\r\n     const getSessionId = async () => {\r\n       if (currentUser) {\r\n         const user_id = currentUser.uid;\r\n         const sessionRef = doc(db, 'session');\r\n"
                },
                {
                    "date": 1695422523293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,30 +17,41 @@\n     };\r\n   }, []);\r\n \r\n   useEffect(() => {\r\n+    // Dohvati sessionId za trenutnog korisnika iz kolekcije \"session\"\r\n     const getSessionId = async () => {\r\n       if (currentUser) {\r\n         const user_id = currentUser.uid;\r\n-        const sessionRef = doc(db, 'session');\r\n-\r\n+        const sessionRef = doc(db, 'session', user_id); // Koristite korisnikov uid kao ID dokumenta u kolekciji \"session\"\r\n+  \r\n         try {\r\n           const sessionDoc = await getDoc(sessionRef);\r\n           if (sessionDoc.exists()) {\r\n             const sessionData = sessionDoc.data();\r\n-            const sessionSessionId = sessionData.sessionId;\r\n-\r\n-            // Postavite sessionId u stanje\r\n-            setSessionId(sessionSessionId);\r\n+            const sessionSessionId = sessionData.id; // Koristite \"id\" polje iz dokumenta\r\n+  \r\n+            // Usporedite sessionSessionId s sessionId\r\n+            if (sessionSessionId === sessionId) {\r\n+              // Ako se podudaraju, postavite sessionId u stanje\r\n+              setSessionId(sessionSessionId);\r\n+            } else {\r\n+              // Ako se ne podudaraju, ažurirajte dokument s novim sessionId\r\n+              await setDoc(sessionRef, { id: sessionId }, { merge: true });\r\n+            }\r\n+          } else {\r\n+            // Ako dokument ne postoji, stvorite ga s sessionId\r\n+            await setDoc(sessionRef, { id: sessionId });\r\n           }\r\n         } catch (error) {\r\n-          console.error('Greška prilikom dohvatanja sessionId:', error);\r\n+          console.error('Greška prilikom dohvatanja i ažuriranja sessionId:', error);\r\n         }\r\n       }\r\n     };\r\n-\r\n+  \r\n     getSessionId();\r\n-  }, [currentUser]);\r\n+  }, [currentUser, sessionId]);\r\n+  \r\n \r\n   const handleSendMessage = async () => {\r\n     if (inputMessage.trim() === '') return;\r\n     const user_id = currentUser.uid;\r\n"
                },
                {
                    "date": 1695422595307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \r\n const ChatComponent = () => {\r\n   const [inputMessage, setInputMessage] = useState('');\r\n   const [currentUser, setCurrentUser] = useState(null);\r\n-\r\n+  const [sessionId, setSessionId] = useState()\r\n   useEffect(() => {\r\n     const unsubscribe = auth.onAuthStateChanged((user) => {\r\n       setCurrentUser(user);\r\n     });\r\n@@ -17,9 +17,8 @@\n     };\r\n   }, []);\r\n \r\n   useEffect(() => {\r\n-    // Dohvati sessionId za trenutnog korisnika iz kolekcije \"session\"\r\n     const getSessionId = async () => {\r\n       if (currentUser) {\r\n         const user_id = currentUser.uid;\r\n         const sessionRef = doc(db, 'session', user_id); // Koristite korisnikov uid kao ID dokumenta u kolekciji \"session\"\r\n"
                },
                {
                    "date": 1695422645781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n import React, { useState, useEffect, useRef } from 'react';\r\n import { auth, db } from '../firebase';\r\n-import { doc, getDoc } from 'firebase/firestore';\r\n+import { doc, getDoc,setDoc } from 'firebase/firestore';\r\n \r\n \r\n const ChatComponent = () => {\r\n   const [inputMessage, setInputMessage] = useState('');\r\n   const [currentUser, setCurrentUser] = useState(null);\r\n-  const [sessionId, setSessionId] = useState()\r\n+  const [sessionId, setSessionId] = useState(null)\r\n   useEffect(() => {\r\n     const unsubscribe = auth.onAuthStateChanged((user) => {\r\n       setCurrentUser(user);\r\n     });\r\n"
                },
                {
                    "date": 1695422666422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,8 +53,10 @@\n \r\n   const handleSendMessage = async () => {\r\n     if (inputMessage.trim() === '') return;\r\n     const user_id = currentUser.uid;\r\n+\r\n+    console.log(sessionId)\r\n    \r\n     setInputMessage(\"\");\r\n \r\n   };\r\n"
                },
                {
                    "date": 1695422693486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useState, useEffect, useRef } from 'react';\r\n import { auth, db } from '../firebase';\r\n-import { doc, getDoc,setDoc } from 'firebase/firestore';\r\n+import { doc, getDoc } from 'firebase/firestore';\r\n \r\n \r\n const ChatComponent = () => {\r\n   const [inputMessage, setInputMessage] = useState('');\r\n"
                },
                {
                    "date": 1695423230610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n-import React, { useState, useEffect, useRef } from 'react';\r\n+import React, { useState, useEffect } from 'react';\r\n import { auth, db } from '../firebase';\r\n import { doc, getDoc } from 'firebase/firestore';\r\n \r\n-\r\n const ChatComponent = () => {\r\n   const [inputMessage, setInputMessage] = useState('');\r\n   const [currentUser, setCurrentUser] = useState(null);\r\n-  const [sessionId, setSessionId] = useState(null)\r\n+  const [sessionId, setSessionId] = useState(null);\r\n+\r\n   useEffect(() => {\r\n     const unsubscribe = auth.onAuthStateChanged((user) => {\r\n       setCurrentUser(user);\r\n     });\r\n@@ -20,53 +20,42 @@\n   useEffect(() => {\r\n     const getSessionId = async () => {\r\n       if (currentUser) {\r\n         const user_id = currentUser.uid;\r\n-        const sessionRef = doc(db, 'session', user_id); // Koristite korisnikov uid kao ID dokumenta u kolekciji \"session\"\r\n-  \r\n+        const sessionRef = doc(db, 'session', user_id);\r\n+\r\n         try {\r\n           const sessionDoc = await getDoc(sessionRef);\r\n           if (sessionDoc.exists()) {\r\n             const sessionData = sessionDoc.data();\r\n-            const sessionSessionId = sessionData.id; // Koristite \"id\" polje iz dokumenta\r\n-  \r\n-            // Usporedite sessionSessionId s sessionId\r\n-            if (sessionSessionId === sessionId) {\r\n-              // Ako se podudaraju, postavite sessionId u stanje\r\n-              setSessionId(sessionSessionId);\r\n-            } else {\r\n-              // Ako se ne podudaraju, ažurirajte dokument s novim sessionId\r\n-              await setDoc(sessionRef, { id: sessionId }, { merge: true });\r\n-            }\r\n+            const sessionSessionId = sessionData.id;\r\n+\r\n+            // Postavite sessionId u stanje i ispišite ga u konzoli\r\n+            setSessionId(sessionSessionId);\r\n+            console.log('sessionId:', sessionSessionId);\r\n           } else {\r\n-            // Ako dokument ne postoji, stvorite ga s sessionId\r\n-            await setDoc(sessionRef, { id: sessionId });\r\n+            console.log('Dokument ne postoji u kolekciji \"session\".');\r\n           }\r\n         } catch (error) {\r\n-          console.error('Greška prilikom dohvatanja i ažuriranja sessionId:', error);\r\n+          console.error('Greška prilikom dohvatanja sessionId:', error);\r\n         }\r\n       }\r\n     };\r\n-  \r\n+\r\n     getSessionId();\r\n-  }, [currentUser, sessionId]);\r\n-  \r\n+  }, [currentUser]);\r\n \r\n   const handleSendMessage = async () => {\r\n     if (inputMessage.trim() === '') return;\r\n     const user_id = currentUser.uid;\r\n \r\n-    console.log(sessionId)\r\n-   \r\n-    setInputMessage(\"\");\r\n-\r\n+    setInputMessage('');\r\n   };\r\n \r\n-\r\n   return (\r\n     <div className=\"p-4 space-y-4\">\r\n       <div className=\"h-96 border border-gray-300 p-4 overflow-y-auto text-black\">\r\n-        {/* Add chat */}\r\n+        {/* Dodajte ispis chat poruka */}\r\n       </div>\r\n \r\n       <div className=\"flex\">\r\n         <input\r\n"
                },
                {
                    "date": 1695423265932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     const getSessionId = async () => {\r\n       if (currentUser) {\r\n         const user_id = currentUser.uid;\r\n         const sessionRef = doc(db, 'session', user_id);\r\n-\r\n+        console.log(user_id)\r\n         try {\r\n           const sessionDoc = await getDoc(sessionRef);\r\n           if (sessionDoc.exists()) {\r\n             const sessionData = sessionDoc.data();\r\n"
                },
                {
                    "date": 1695423985923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import React, { useState, useEffect } from 'react';\r\n import { auth, db } from '../firebase';\r\n import { doc, getDoc } from 'firebase/firestore';\r\n+import sendMessage from '@/server/send_message';\r\n \r\n const ChatComponent = () => {\r\n   const [inputMessage, setInputMessage] = useState('');\r\n   const [currentUser, setCurrentUser] = useState(null);\r\n"
                },
                {
                    "date": 1695423997349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,8 +48,10 @@\n   const handleSendMessage = async () => {\r\n     if (inputMessage.trim() === '') return;\r\n     const user_id = currentUser.uid;\r\n \r\n+    sendMessage()\r\n+\r\n     setInputMessage('');\r\n   };\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1695424005251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n   const handleSendMessage = async () => {\r\n     if (inputMessage.trim() === '') return;\r\n     const user_id = currentUser.uid;\r\n \r\n-    sendMessage()\r\n+    sendMessage(input)\r\n \r\n     setInputMessage('');\r\n   };\r\n \r\n"
                },
                {
                    "date": 1695424010465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n   const handleSendMessage = async () => {\r\n     if (inputMessage.trim() === '') return;\r\n     const user_id = currentUser.uid;\r\n \r\n-    sendMessage(input)\r\n+    sendMessage(inputMessage, user_id)\r\n \r\n     setInputMessage('');\r\n   };\r\n \r\n"
                },
                {
                    "date": 1695424016641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n   const handleSendMessage = async () => {\r\n     if (inputMessage.trim() === '') return;\r\n     const user_id = currentUser.uid;\r\n \r\n-    sendMessage(inputMessage, user_id)\r\n+    sendMessage(inputMessage, user_id, )\r\n \r\n     setInputMessage('');\r\n   };\r\n \r\n"
                },
                {
                    "date": 1695424028668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n   const handleSendMessage = async () => {\r\n     if (inputMessage.trim() === '') return;\r\n     const user_id = currentUser.uid;\r\n \r\n-    sendMessage(inputMessage, user_id, )\r\n+    sendMessage(inputMessage, user_id, \"1a40cd75-3498-4861-9959-98e1d26cc47c\")\r\n \r\n     setInputMessage('');\r\n   };\r\n \r\n"
                },
                {
                    "date": 1695424070307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n   const handleSendMessage = async () => {\r\n     if (inputMessage.trim() === '') return;\r\n     const user_id = currentUser.uid;\r\n \r\n-    sendMessage(inputMessage, user_id, \"1a40cd75-3498-4861-9959-98e1d26cc47c\")\r\n+    sendMessage(inputMessage, user_id, \"1a40cd75-3498-4861-9959-98e1d26cc47c\", process.env.api_key, )\r\n \r\n     setInputMessage('');\r\n   };\r\n \r\n"
                },
                {
                    "date": 1695424077686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n   const handleSendMessage = async () => {\r\n     if (inputMessage.trim() === '') return;\r\n     const user_id = currentUser.uid;\r\n \r\n-    sendMessage(inputMessage, user_id, \"1a40cd75-3498-4861-9959-98e1d26cc47c\", process.env.api_key, )\r\n+    sendMessage(inputMessage, user_id, \"1a40cd75-3498-4861-9959-98e1d26cc47c\", process.env.api_key, process.env.system_message)\r\n \r\n     setInputMessage('');\r\n   };\r\n \r\n"
                },
                {
                    "date": 1695424228617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n     setInputMessage('');\r\n   };\r\n \r\n   return (\r\n-    <div className=\"p-4 space-y-4\">\r\n+    <div className=\"p-4 space-y-4\" onClick={handleSendMessage}>\r\n       <div className=\"h-96 border border-gray-300 p-4 overflow-y-auto text-black\">\r\n         {/* Dodajte ispis chat poruka */}\r\n       </div>\r\n \r\n"
                },
                {
                    "date": 1695424235490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,8 @@\n   const handleSendMessage = async () => {\r\n     if (inputMessage.trim() === '') return;\r\n     const user_id = currentUser.uid;\r\n \r\n-    sendMessage(inputMessage, user_id, \"1a40cd75-3498-4861-9959-98e1d26cc47c\", process.env.api_key, process.env.system_message)\r\n \r\n     setInputMessage('');\r\n   };\r\n \r\n"
                },
                {
                    "date": 1695424277267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import React, { useState, useEffect } from 'react';\r\n import { auth, db } from '../firebase';\r\n import { doc, getDoc } from 'firebase/firestore';\r\n-import sendMessage from '@/server/send_message';\r\n \r\n const ChatComponent = () => {\r\n   const [inputMessage, setInputMessage] = useState('');\r\n   const [currentUser, setCurrentUser] = useState(null);\r\n"
                },
                {
                    "date": 1695424324901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n const ChatComponent = () => {\r\n   const [inputMessage, setInputMessage] = useState('');\r\n   const [currentUser, setCurrentUser] = useState(null);\r\n   const [sessionId, setSessionId] = useState(null);\r\n+  const sendMessage = require(\"../send_message.js\")\r\n \r\n   useEffect(() => {\r\n     const unsubscribe = auth.onAuthStateChanged((user) => {\r\n       setCurrentUser(user);\r\n"
                },
                {
                    "date": 1695424336424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n const ChatComponent = () => {\r\n   const [inputMessage, setInputMessage] = useState('');\r\n   const [currentUser, setCurrentUser] = useState(null);\r\n   const [sessionId, setSessionId] = useState(null);\r\n-  const sendMessage = require(\"../send_message.js\")\r\n+  const sendMessage = require(\"....//send_message.js\")\r\n \r\n   useEffect(() => {\r\n     const unsubscribe = auth.onAuthStateChanged((user) => {\r\n       setCurrentUser(user);\r\n"
                },
                {
                    "date": 1695424343646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n const ChatComponent = () => {\r\n   const [inputMessage, setInputMessage] = useState('');\r\n   const [currentUser, setCurrentUser] = useState(null);\r\n   const [sessionId, setSessionId] = useState(null);\r\n-  const sendMessage = require(\"....//send_message.js\")\r\n+  const sendMessage = require(\"../../server\")\r\n \r\n   useEffect(() => {\r\n     const unsubscribe = auth.onAuthStateChanged((user) => {\r\n       setCurrentUser(user);\r\n"
                },
                {
                    "date": 1695424371586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n const ChatComponent = () => {\r\n   const [inputMessage, setInputMessage] = useState('');\r\n   const [currentUser, setCurrentUser] = useState(null);\r\n   const [sessionId, setSessionId] = useState(null);\r\n-  const sendMessage = require(\"../../server\")\r\n+ \r\n \r\n   useEffect(() => {\r\n     const unsubscribe = auth.onAuthStateChanged((user) => {\r\n       setCurrentUser(user);\r\n"
                },
                {
                    "date": 1695475319552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,28 +19,9 @@\n   }, []);\r\n \r\n   useEffect(() => {\r\n     const getSessionId = async () => {\r\n-      if (currentUser) {\r\n-        const user_id = currentUser.uid;\r\n-        const sessionRef = doc(db, 'session', user_id);\r\n-        console.log(user_id)\r\n-        try {\r\n-          const sessionDoc = await getDoc(sessionRef);\r\n-          if (sessionDoc.exists()) {\r\n-            const sessionData = sessionDoc.data();\r\n-            const sessionSessionId = sessionData.id;\r\n-\r\n-            // Postavite sessionId u stanje i ispišite ga u konzoli\r\n-            setSessionId(sessionSessionId);\r\n-            console.log('sessionId:', sessionSessionId);\r\n-          } else {\r\n-            console.log('Dokument ne postoji u kolekciji \"session\".');\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Greška prilikom dohvatanja sessionId:', error);\r\n-        }\r\n-      }\r\n+      \r\n     };\r\n \r\n     getSessionId();\r\n   }, [currentUser]);\r\n"
                },
                {
                    "date": 1695475627256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,12 @@\n import React, { useState, useEffect } from 'react';\r\n import { auth, db } from '../firebase';\r\n-import { doc, getDoc } from 'firebase/firestore';\r\n+import { collection, query, where, getDocs } from 'firebase/firestore';\r\n \r\n const ChatComponent = () => {\r\n   const [inputMessage, setInputMessage] = useState('');\r\n   const [currentUser, setCurrentUser] = useState(null);\r\n   const [sessionId, setSessionId] = useState(null);\r\n- \r\n \r\n   useEffect(() => {\r\n     const unsubscribe = auth.onAuthStateChanged((user) => {\r\n       setCurrentUser(user);\r\n@@ -19,18 +18,38 @@\n   }, []);\r\n \r\n   useEffect(() => {\r\n     const getSessionId = async () => {\r\n-      \r\n+      if (currentUser) {\r\n+        // Dohvati korisnikov uid\r\n+        const user_id = currentUser.uid;\r\n+\r\n+        // Napravi upit za pronalaženje dokumenta s odgovarajućim \"user_id\"\r\n+        const q = query(collection(db, 'session'), where('user_id', '==', user_id));\r\n+\r\n+        try {\r\n+          const querySnapshot = await getDocs(q);\r\n+          if (!querySnapshot.empty) {\r\n+            // Pretpostavljamo da postoji samo jedan takav dokument pa koristimo prvi pronađeni dokument\r\n+            const firstDoc = querySnapshot.docs[0];\r\n+            setSessionId(firstDoc.id);\r\n+          } else {\r\n+            console.error('Dokument ne postoji');\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Greška prilikom dohvaćanja dokumenata', error);\r\n+        }\r\n+      }\r\n     };\r\n \r\n     getSessionId();\r\n   }, [currentUser]);\r\n \r\n   const handleSendMessage = async () => {\r\n-    if (inputMessage.trim() === '') return;\r\n-    const user_id = currentUser.uid;\r\n+    if (inputMessage.trim() === '' || !sessionId) return;\r\n \r\n+    // Ovdje možete koristiti sessionId i currentUser za slanje poruke ili komunikaciju s odgovarajućim dokumentom u Firestore-u\r\n+    // sessionId će identificirati korisnika ili sesiju\r\n \r\n     setInputMessage('');\r\n   };\r\n \r\n"
                },
                {
                    "date": 1695475702953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,14 +45,30 @@\n   }, [currentUser]);\r\n \r\n   const handleSendMessage = async () => {\r\n     if (inputMessage.trim() === '' || !sessionId) return;\r\n-\r\n-    // Ovdje možete koristiti sessionId i currentUser za slanje poruke ili komunikaciju s odgovarajućim dokumentom u Firestore-u\r\n-    // sessionId će identificirati korisnika ili sesiju\r\n-\r\n+  \r\n+    try {\r\n+      // Dohvati dokument na temelju sessionId\r\n+      const sessionRef = doc(db, 'session', sessionId);\r\n+      const sessionSnapshot = await getDoc(sessionRef);\r\n+  \r\n+      if (sessionSnapshot.exists()) {\r\n+        // Dohvati \"id\" iz dokumenta\r\n+        const id = sessionSnapshot.data().id;\r\n+        console.log('id iz dokumenta:', id);\r\n+  \r\n+        // Ovdje možete nastaviti s logikom za slanje poruke ili komunikaciju s dokumentom\r\n+      } else {\r\n+        console.error('Dokument ne postoji');\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Greška prilikom dohvaćanja dokumenta', error);\r\n+    }\r\n+  \r\n     setInputMessage('');\r\n   };\r\n+  \r\n \r\n   return (\r\n     <div className=\"p-4 space-y-4\" onClick={handleSendMessage}>\r\n       <div className=\"h-96 border border-gray-300 p-4 overflow-y-auto text-black\">\r\n"
                },
                {
                    "date": 1695475795758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useState, useEffect } from 'react';\r\n import { auth, db } from '../firebase';\r\n-import { collection, query, where, getDocs } from 'firebase/firestore';\r\n+import { collection, query, where, getDocs, doc } from 'firebase/firestore';\r\n \r\n const ChatComponent = () => {\r\n   const [inputMessage, setInputMessage] = useState('');\r\n   const [currentUser, setCurrentUser] = useState(null);\r\n"
                },
                {
                    "date": 1695475832479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useState, useEffect } from 'react';\r\n import { auth, db } from '../firebase';\r\n-import { collection, query, where, getDocs, doc } from 'firebase/firestore';\r\n+import { collection, query, where, getDocs, doc, getDoc } from 'firebase/firestore';\r\n \r\n const ChatComponent = () => {\r\n   const [inputMessage, setInputMessage] = useState('');\r\n   const [currentUser, setCurrentUser] = useState(null);\r\n"
                },
                {
                    "date": 1695475946495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,8 @@\n         // Dohvati \"id\" iz dokumenta\r\n         const id = sessionSnapshot.data().id;\r\n         console.log('id iz dokumenta:', id);\r\n   \r\n-        // Ovdje možete nastaviti s logikom za slanje poruke ili komunikaciju s dokumentom\r\n       } else {\r\n         console.error('Dokument ne postoji');\r\n       }\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1695476276965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,13 @@\n import React, { useState, useEffect } from 'react';\r\n import { auth, db } from '../firebase';\r\n-import { collection, query, where, getDocs, doc, getDoc } from 'firebase/firestore';\r\n+import { collection, query, where, getDocs, doc } from 'firebase/firestore';\r\n \r\n const ChatComponent = () => {\r\n   const [inputMessage, setInputMessage] = useState('');\r\n   const [currentUser, setCurrentUser] = useState(null);\r\n   const [sessionId, setSessionId] = useState(null);\r\n+  const [sessionDocumentId, setSessionDocumentId] = useState(null); // Dodali smo state za pohranu id dokumenta\r\n \r\n   useEffect(() => {\r\n     const unsubscribe = auth.onAuthStateChanged((user) => {\r\n       setCurrentUser(user);\r\n@@ -31,8 +32,11 @@\n           if (!querySnapshot.empty) {\r\n             // Pretpostavljamo da postoji samo jedan takav dokument pa koristimo prvi pronađeni dokument\r\n             const firstDoc = querySnapshot.docs[0];\r\n             setSessionId(firstDoc.id);\r\n+\r\n+            // Spremi id dokumenta u state\r\n+            setSessionDocumentId(firstDoc.id);\r\n           } else {\r\n             console.error('Dokument ne postoji');\r\n           }\r\n         } catch (error) {\r\n@@ -43,31 +47,17 @@\n \r\n     getSessionId();\r\n   }, [currentUser]);\r\n \r\n-  const handleSendMessage = async () => {\r\n-    if (inputMessage.trim() === '' || !sessionId) return;\r\n-  \r\n-    try {\r\n-      // Dohvati dokument na temelju sessionId\r\n-      const sessionRef = doc(db, 'session', sessionId);\r\n-      const sessionSnapshot = await getDoc(sessionRef);\r\n-  \r\n-      if (sessionSnapshot.exists()) {\r\n-        // Dohvati \"id\" iz dokumenta\r\n-        const id = sessionSnapshot.data().id;\r\n-        console.log('id iz dokumenta:', id);\r\n-  \r\n-      } else {\r\n-        console.error('Dokument ne postoji');\r\n-      }\r\n-    } catch (error) {\r\n-      console.error('Greška prilikom dohvaćanja dokumenta', error);\r\n-    }\r\n-  \r\n+  // Ispravljena funkcija handleSendMessage koja samo ispisuje sessionDocumentId\r\n+  const handleSendMessage = () => {\r\n+    if (inputMessage.trim() === '' || !sessionDocumentId) return;\r\n+    \r\n+    // Ispiši sessionDocumentId u konzolu\r\n+    console.log('id iz dokumenta:', sessionDocumentId);\r\n+\r\n     setInputMessage('');\r\n   };\r\n-  \r\n \r\n   return (\r\n     <div className=\"p-4 space-y-4\" onClick={handleSendMessage}>\r\n       <div className=\"h-96 border border-gray-300 p-4 overflow-y-auto text-black\">\r\n"
                },
                {
                    "date": 1695478311665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import React, { useState, useEffect } from 'react';\r\n import { auth, db } from '../firebase';\r\n import { collection, query, where, getDocs, doc } from 'firebase/firestore';\r\n+import axios from 'axios';\r\n \r\n const ChatComponent = () => {\r\n   const [inputMessage, setInputMessage] = useState('');\r\n   const [currentUser, setCurrentUser] = useState(null);\r\n"
                },
                {
                    "date": 1695478323793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,8 +55,19 @@\n     \r\n     // Ispiši sessionDocumentId u konzolu\r\n     console.log('id iz dokumenta:', sessionDocumentId);\r\n \r\n+     // Ovdje šaljemo poruku na server putem API-ja\r\n+     const sendMessageResponse = await axios.post('/message/send', {\r\n+      userMessage: inputMessage,\r\n+      userId: currentUser.uid,\r\n+      sessionId: sessionDocumentId,\r\n+      nickname: 'NICKNAME', // Zamijenite s pravim nadimkom ili prenesite ga kao prop izvan komponente\r\n+    });\r\n+\r\n+    console.log('Odgovor sa servera:', sendMessageResponse.data);\r\n+\r\n+\r\n     setInputMessage('');\r\n   };\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1695478329245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n     getSessionId();\r\n   }, [currentUser]);\r\n \r\n   // Ispravljena funkcija handleSendMessage koja samo ispisuje sessionDocumentId\r\n-  const handleSendMessage = () => {\r\n+  const handleSendMessage = async() => {\r\n     if (inputMessage.trim() === '' || !sessionDocumentId) return;\r\n     \r\n     // Ispiši sessionDocumentId u konzolu\r\n     console.log('id iz dokumenta:', sessionDocumentId);\r\n"
                },
                {
                    "date": 1695478337620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n      const sendMessageResponse = await axios.post('/message/send', {\r\n       userMessage: inputMessage,\r\n       userId: currentUser.uid,\r\n       sessionId: sessionDocumentId,\r\n-      nickname: 'NICKNAME', // Zamijenite s pravim nadimkom ili prenesite ga kao prop izvan komponente\r\n+      nickname: 'NICKNAME', \r\n     });\r\n \r\n     console.log('Odgovor sa servera:', sendMessageResponse.data);\r\n \r\n"
                },
                {
                    "date": 1695478425071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     \r\n     // Ispiši sessionDocumentId u konzolu\r\n     console.log('id iz dokumenta:', sessionDocumentId);\r\n \r\n-     // Ovdje šaljemo poruku na server putem API-ja\r\n+\r\n      const sendMessageResponse = await axios.post('/message/send', {\r\n       userMessage: inputMessage,\r\n       userId: currentUser.uid,\r\n       sessionId: sessionDocumentId,\r\n"
                },
                {
                    "date": 1695478963614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n     // Ispiši sessionDocumentId u konzolu\r\n     console.log('id iz dokumenta:', sessionDocumentId);\r\n \r\n \r\n-     const sendMessageResponse = await axios.post('/message/send', {\r\n+     const sendMessageResponse = await axios.post('/send', {\r\n       userMessage: inputMessage,\r\n       userId: currentUser.uid,\r\n       sessionId: sessionDocumentId,\r\n       nickname: 'NICKNAME', \r\n"
                },
                {
                    "date": 1695479178441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n     // Ispiši sessionDocumentId u konzolu\r\n     console.log('id iz dokumenta:', sessionDocumentId);\r\n \r\n \r\n-     const sendMessageResponse = await axios.post('/send', {\r\n+     const sendMessageResponse = await axios.post('/message/send', {\r\n       userMessage: inputMessage,\r\n       userId: currentUser.uid,\r\n       sessionId: sessionDocumentId,\r\n       nickname: 'NICKNAME', \r\n"
                },
                {
                    "date": 1695479195112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n     // Ispiši sessionDocumentId u konzolu\r\n     console.log('id iz dokumenta:', sessionDocumentId);\r\n \r\n \r\n-     const sendMessageResponse = await axios.post('/message/send', {\r\n+     const sendMessageResponse = await axios.post('localhost:5000/message/send', {\r\n       userMessage: inputMessage,\r\n       userId: currentUser.uid,\r\n       sessionId: sessionDocumentId,\r\n       nickname: 'NICKNAME', \r\n"
                },
                {
                    "date": 1695479256932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n     // Ispiši sessionDocumentId u konzolu\r\n     console.log('id iz dokumenta:', sessionDocumentId);\r\n \r\n \r\n-     const sendMessageResponse = await axios.post('localhost:5000/message/send', {\r\n+     const sendMessageResponse = await axios.post('http://localhost:5000/message/send', {\r\n       userMessage: inputMessage,\r\n       userId: currentUser.uid,\r\n       sessionId: sessionDocumentId,\r\n       nickname: 'NICKNAME', \r\n"
                },
                {
                    "date": 1695496782107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n     setInputMessage('');\r\n   };\r\n \r\n   return (\r\n-    <div className=\"p-4 space-y-4\" onClick={handleSendMessage}>\r\n+    <div className=\"p-4 space-y-4\">\r\n       <div className=\"h-96 border border-gray-300 p-4 overflow-y-auto text-black\">\r\n         {/* Dodajte ispis chat poruka */}\r\n       </div>\r\n \r\n"
                },
                {
                    "date": 1695497312761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,8 +56,9 @@\n     // Ispiši sessionDocumentId u konzolu\r\n     console.log('id iz dokumenta:', sessionDocumentId);\r\n \r\n \r\n+    I\r\n      const sendMessageResponse = await axios.post('http://localhost:5000/message/send', {\r\n       userMessage: inputMessage,\r\n       userId: currentUser.uid,\r\n       sessionId: sessionDocumentId,\r\n"
                },
                {
                    "date": 1695497325313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,19 +56,41 @@\n     // Ispiši sessionDocumentId u konzolu\r\n     console.log('id iz dokumenta:', sessionDocumentId);\r\n \r\n \r\n-    I\r\n-     const sendMessageResponse = await axios.post('http://localhost:5000/message/send', {\r\n-      userMessage: inputMessage,\r\n-      userId: currentUser.uid,\r\n-      sessionId: sessionDocumentId,\r\n-      nickname: 'NICKNAME', \r\n-    });\r\n+    \r\n+    if (sessionDocumentId) {\r\n+      // Ako postoji sessionId, pošalji ga\r\n+      const sendMessageResponse = await axios.post('http://localhost:5000/message/send', {\r\n+        userMessage: inputMessage,\r\n+        userId: currentUser.uid,\r\n+        sessionId: sessionDocumentId,\r\n+        nickname: 'NICKNAME',\r\n+      });\r\n+  \r\n+      console.log('Odgovor sa servera:', sendMessageResponse.data);\r\n+    } else {\r\n+      // Ako ne postoji sessionId, pošalji bez njega\r\n+      const sendMessageResponse = await axios.post('http://localhost:5000/message/send', {\r\n+        userMessage: inputMessage,\r\n+        userId: currentUser.uid,\r\n+        nickname: 'NICKNAME',\r\n+      });\r\n+  \r\n+      console.log('Odgovor sa servera:', sendMessageResponse.data);\r\n+    }\r\n+  \r\n+    setInputMessage('');\r\n+  };\r\n+  U ovom ažuriranom kodu, prvo provjeravate postoji li sessionId (sessionDocumentId). Ako postoji, šaljete zahtjev s njim. Ako ne postoji, šaljete zahtjev bez sessionId. Ovo će spriječiti slanje sessionId-a ako odgovarajući dokument u kolekciji \"session\" ne postoji.\r\n+  \r\n+  \r\n+  \r\n+  \r\n+  \r\n+  \r\n \r\n-    console.log('Odgovor sa servera:', sendMessageResponse.data);\r\n \r\n-\r\n     setInputMessage('');\r\n   };\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1695497331017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,17 +80,11 @@\n     }\r\n   \r\n     setInputMessage('');\r\n   };\r\n-  U ovom ažuriranom kodu, prvo provjeravate postoji li sessionId (sessionDocumentId). Ako postoji, šaljete zahtjev s njim. Ako ne postoji, šaljete zahtjev bez sessionId. Ovo će spriječiti slanje sessionId-a ako odgovarajući dokument u kolekciji \"session\" ne postoji.\r\n-  \r\n-  \r\n-  \r\n-  \r\n-  \r\n-  \r\n \r\n \r\n+\r\n     setInputMessage('');\r\n   };\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1695497346269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,12 +80,10 @@\n     }\r\n   \r\n     setInputMessage('');\r\n   };\r\n-\r\n-\r\n-\r\n-    setInputMessage('');\r\n+      \r\n+  setInputMessage('');\r\n   };\r\n \r\n   return (\r\n     <div className=\"p-4 space-y-4\">\r\n@@ -109,7 +107,7 @@\n         </button>\r\n       </div>\r\n     </div>\r\n   );\r\n-};\r\n+;\r\n \r\n export default ChatComponent;\r\n"
                },
                {
                    "date": 1695497382131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,34 +57,20 @@\n     console.log('id iz dokumenta:', sessionDocumentId);\r\n \r\n \r\n     \r\n-    if (sessionDocumentId) {\r\n-      // Ako postoji sessionId, pošalji ga\r\n-      const sendMessageResponse = await axios.post('http://localhost:5000/message/send', {\r\n-        userMessage: inputMessage,\r\n-        userId: currentUser.uid,\r\n-        sessionId: sessionDocumentId,\r\n-        nickname: 'NICKNAME',\r\n-      });\r\n-  \r\n-      console.log('Odgovor sa servera:', sendMessageResponse.data);\r\n-    } else {\r\n-      // Ako ne postoji sessionId, pošalji bez njega\r\n-      const sendMessageResponse = await axios.post('http://localhost:5000/message/send', {\r\n-        userMessage: inputMessage,\r\n-        userId: currentUser.uid,\r\n-        nickname: 'NICKNAME',\r\n-      });\r\n-  \r\n-      console.log('Odgovor sa servera:', sendMessageResponse.data);\r\n-    }\r\n-  \r\n+     const sendMessageResponse = await axios.post('http://localhost:5000/message/send', {\r\n+      userMessage: inputMessage,\r\n+      userId: currentUser.uid,\r\n+      sessionId: sessionDocumentId,\r\n+      nickname: 'NICKNAME', \r\n+    });\r\n+\r\n+    console.log('Odgovor sa servera:', sendMessageResponse.data);\r\n+\r\n+\r\n     setInputMessage('');\r\n   };\r\n-      \r\n-  setInputMessage('');\r\n-  };\r\n \r\n   return (\r\n     <div className=\"p-4 space-y-4\">\r\n       <div className=\"h-96 border border-gray-300 p-4 overflow-y-auto text-black\">\r\n@@ -107,7 +93,7 @@\n         </button>\r\n       </div>\r\n     </div>\r\n   );\r\n-;\r\n+};\r\n \r\n export default ChatComponent;\r\n"
                },
                {
                    "date": 1695497393937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,19 +56,29 @@\n     // Ispiši sessionDocumentId u konzolu\r\n     console.log('id iz dokumenta:', sessionDocumentId);\r\n \r\n \r\n-    \r\n-     const sendMessageResponse = await axios.post('http://localhost:5000/message/send', {\r\n-      userMessage: inputMessage,\r\n-      userId: currentUser.uid,\r\n-      sessionId: sessionDocumentId,\r\n-      nickname: 'NICKNAME', \r\n-    });\r\n+    if (sessionDocumentId) {\r\n+      // Ako postoji sessionId, pošalji ga\r\n+      const sendMessageResponse = await axios.post('http://localhost:5000/message/send', {\r\n+        userMessage: inputMessage,\r\n+        userId: currentUser.uid,\r\n+        sessionId: sessionDocumentId,\r\n+        nickname: 'NICKNAME',\r\n+      });\r\n+  \r\n+      console.log('Odgovor sa servera:', sendMessageResponse.data);\r\n+    } else {\r\n+      // Ako ne postoji sessionId, pošalji bez njega\r\n+      const sendMessageResponse = await axios.post('http://localhost:5000/message/send', {\r\n+        userMessage: inputMessage,\r\n+        userId: currentUser.uid,\r\n+        nickname: 'NICKNAME',\r\n+      });\r\n+  \r\n+      console.log('Odgovor sa servera:', sendMessageResponse.data);\r\n+    }\r\n \r\n-    console.log('Odgovor sa servera:', sendMessageResponse.data);\r\n-\r\n-\r\n     setInputMessage('');\r\n   };\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1695497591890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n   const [currentUser, setCurrentUser] = useState(null);\r\n   const [sessionId, setSessionId] = useState(null);\r\n   const [sessionDocumentId, setSessionDocumentId] = useState(null); // Dodali smo state za pohranu id dokumenta\r\n \r\n+  const [nickname, setNickname] = useState(null)\r\n   useEffect(() => {\r\n     const unsubscribe = auth.onAuthStateChanged((user) => {\r\n       setCurrentUser(user);\r\n     });\r\n"
                },
                {
                    "date": 1695497607075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n   const [nickname, setNickname] = useState(null)\r\n \r\n \r\n   \r\n+\r\n   useEffect(() => {\r\n     const unsubscribe = auth.onAuthStateChanged((user) => {\r\n       setCurrentUser(user);\r\n     });\r\n"
                },
                {
                    "date": 1695801900260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,9 +240,12 @@\n             fill=\"none\"\r\n             xmlns=\"http://www.w3.org/2000/svg\"\r\n             className=\"mr-2\"\r\n           >\r\n-            {/* SVG za \"Relly Notes\" */}\r\n+            <path d=\"M21 8.46286V20.1049C21 23.6871 18.7625 24.8812 16 24.8812H6C3.2375 24.8812 1 23.6871 1 20.1049V8.46286C1 4.58217 3.2375 3.68663 6 3.68663C6 4.42695 6.31246 5.09562 6.82496 5.58518C7.33746 6.07475 8.0375 6.37326 8.8125 6.37326H13.1875C14.7375 6.37326 16 5.16726 16 3.68663C18.7625 3.68663 21 4.58217 21 8.46286Z\" stroke=\"#FFABAB\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n+<path d=\"M16 3.68663C16 5.16726 14.7375 6.37326 13.1875 6.37326H8.8125C8.0375 6.37326 7.33746 6.07475 6.82496 5.58518C6.31246 5.09562 6 4.42695 6 3.68663C6 2.206 7.2625 1 8.8125 1H13.1875C13.9625 1 14.6625 1.29851 15.175 1.78808C15.6875 2.27764 16 2.94632 16 3.68663Z\" stroke=\"#FFABAB\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n+<path d=\"M6 14.1346H11\" stroke=\"#FFABAB\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n+<path d=\"M6 18.9109H16\" stroke=\"#FFABAB\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n           </svg>\r\n           Relly Notes\r\n         </button>\r\n         <button className=\"modalColor rounded-full p-4 mb-4 flex items-center\">\r\n"
                }
            ],
            "date": 1695421057675,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect, useRef } from 'react';\r\nimport { auth, db } from '../firebase';\r\nimport { doc, updateDoc, arrayUnion, getDoc } from 'firebase/firestore';\r\n\r\nimport { ChatOpenAI } from \"langchain/chat_models/openai\";\r\nimport { ConversationSummaryBufferMemory } from \"langchain/memory\";\r\nimport { ConversationChain } from \"langchain/chains\";\r\nimport { MessagesPlaceholder, ChatPromptTemplate } from \"langchain/prompts\";\r\n\r\n\r\nconst ChatComponent = () => {\r\n  const [inputMessage, setInputMessage] = useState('');\r\n  const [chatHistory, setChatHistory] = useState([]);\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [sessionId, setSessionId] = useState(null); \r\n\r\n  const aiResponseRef = useRef(\"\");\r\n  const memoryRef = useRef(\"\");\r\n  useEffect(() => {\r\n    // Ovdje dohvatite trenutnog korisnika iz Firebase autentikacije\r\n    const unsubscribe = auth.onAuthStateChanged((user) => {\r\n      setCurrentUser(user);\r\n    });\r\n\r\n    // Poništiti pretplatu kada komponenta unmounts\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Dohvati sessionId za trenutnog korisnika iz kolekcije \"session\"\r\n    const getSessionId = async () => {\r\n      if (currentUser) {\r\n        const user_id = currentUser.uid;\r\n        const sessionRef = doc(db, 'session', user_id);\r\n\r\n        try {\r\n          const sessionDoc = await getDoc(sessionRef);\r\n          if (sessionDoc.exists()) {\r\n            const sessionData = sessionDoc.data();\r\n            const sessionSessionId = sessionData.sessionId;\r\n\r\n            // Postavite sessionId u stanje\r\n            setSessionId(sessionSessionId);\r\n          }\r\n        } catch (error) {\r\n          console.error('Greška prilikom dohvatanja sessionId:', error);\r\n        }\r\n      }\r\n    };\r\n\r\n    getSessionId();\r\n  }, [currentUser]);\r\n\r\n  const handleSendMessage = async () => {\r\n    if (inputMessage.trim() === '') return;\r\n\r\n\r\n\r\n    const user_id = currentUser.uid;\r\n    const sessionRef = doc(db, \"session\", user_id);\r\n\r\n    const sessionDoc = await getDoc(sessionRef);\r\n    const sessionData = sessionDoc.data();\r\n\r\n    if (sessionData && sessionData.session_memory) {\r\n\r\n      const sessionMemory = JSON.parse(sessionData.session_memory)\r\n      const { aiResponse, memory } = await sendMessage(inputMessage,sessionMemory);\r\n\r\n      console.log(sessionMemory)\r\n      aiResponseRef.current = aiResponse;\r\n      memoryRef.current = memory;\r\n    } else {\r\n      const { aiResponse, memory } = await sendMessage(inputMessage);\r\n\r\n      aiResponseRef.current = aiResponse;\r\n      memoryRef.current = memory;\r\n    }\r\n\r\n    const chatHistoryItem = {\r\n      userMessage: {\r\n        role: \"user\",\r\n        message: inputMessage,\r\n        timestampUserMessage: new Date().toLocaleString(),\r\n      },\r\n      aiMessage: {\r\n        role: \"ai\",\r\n        message: aiResponseRef.current,\r\n        timestampAiResponse: new Date().toLocaleString(),\r\n      },\r\n    };\r\n\r\n    setChatHistory([...chatHistory, chatHistoryItem]);\r\n\r\n    setInputMessage(\"\");\r\n\r\n    if (currentUser) {\r\n      try {\r\n        await updateDoc(sessionRef, {\r\n          session_history: arrayUnion(chatHistoryItem),\r\n          session_memory: JSON.stringify(memoryRef.current)\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Greška prilikom ažuriranja dokumenta:\", error);\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"p-4 space-y-4\">\r\n      <div className=\"h-96 border border-gray-300 p-4 overflow-y-auto text-black\">\r\n        {chatHistory.map((chatHistoryItem, index) => (\r\n          <>\r\n            <div\r\n              key={index}\r\n              className={`${\r\n                chatHistoryItem.userMessage.role === \"user\"\r\n                  ? \"text-blue-600\"\r\n                  : \"text-green-600\"\r\n              } ${\r\n                chatHistoryItem.userMessage.role === \"user\"\r\n                  ? \"text-right\"\r\n                  : \"text-left\"\r\n              } whitespace-pre-line`}\r\n            >\r\n              {chatHistoryItem.userMessage.message}\r\n              <div className=\"text-xs text-gray-500 ml-2\">\r\n                {chatHistoryItem.userMessage.timestampUserMessage}\r\n              </div>\r\n            </div>\r\n            <div\r\n              key={`${index}-ai`}\r\n              className={`${\r\n                chatHistoryItem.aiMessage.role === \"user\"\r\n                  ? \"text-blue-600\"\r\n                  : \"text-green-600\"\r\n              } ${\r\n                chatHistoryItem.aiMessage.role === \"user\"\r\n                  ? \"text-right\"\r\n                  : \"text-left\"\r\n              } whitespace-pre-line`}\r\n            >\r\n              {chatHistoryItem.aiMessage.message}\r\n            </div>\r\n          </>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"flex\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"flex-1 border border-gray-300 p-2 rounded-l text-black\"\r\n          placeholder=\"Unesite poruku...\"\r\n          value={inputMessage}\r\n          onChange={(e) => setInputMessage(e.target.value)}\r\n        />\r\n        <button\r\n          className=\"bg-blue-600 text-black p-2 rounded-r\"\r\n          onClick={handleSendMessage}\r\n        >\r\n          Pošalji\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatComponent;\r\n"
        }
    ]
}